{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onAdd","setState","preState","preProps","number","increment","onSub","onSubmit","state","localStorage","setItem","toString","alert","onReset","onEvent","e","_e$target","target","name","value","defineProperty","react_default","a","createElement","className","style","marginLeft","onClick","type","onChange","width","borderRadius","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2MAoEeA,cAhEb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAORQ,MAAO,WACLP,EAAKQ,SAAS,SAACC,EAAUC,GACvB,MAAM,CAACC,OAAOF,EAASE,OAAQD,EAASE,cAV1BZ,EAalBa,MAAO,WACLb,EAAKQ,SAAS,SAACC,EAAUC,GACvB,MAAM,CAACC,OAASF,EAASE,OAAOD,EAASE,cAf3BZ,EAkBlBc,SAAU,WAAK,IACRH,EAAUX,EAAKe,MAAfJ,OACFA,GAAQ,EAAIA,GAAQ,IACvBK,aAAaC,QAAQN,EAAOO,WAAWP,GAIrCQ,MAAM,qDAzBQnB,EA4BlBoB,QAAS,WACPpB,EAAKQ,SAAS,CAACG,OAAO,KA7BNX,EAgClBqB,QAAS,SAACC,GAAK,IAAAC,EACOD,EAAEE,OAAjBC,EADQF,EACRE,KAAMC,EADEH,EACFG,MACX1B,EAAKQ,SAALP,OAAA0B,EAAA,EAAA1B,CAAA,GACGwB,EAAQC,KAhCX1B,EAAKe,MAAQ,CACXJ,OAAO,EAAEX,EAAKD,MAAMa,WAJNZ,wEAuClB,OACE4B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAAaC,MAAO,CAACC,WAAW,UAChDL,EAAAC,EAAAC,cAAA,UAAK3B,KAAKY,MAAMJ,OAAhB,KAEAiB,EAAAC,EAAAC,cAAA,UAAQI,QAAS/B,KAAKI,OAAtB,KAGAqB,EAAAC,EAAAC,cAAA,UAAQI,QAAS/B,KAAKW,UAAtB,QACAc,EAAAC,EAAAC,cAAA,UAGAF,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAOT,MAAOvB,KAAKY,MAAMJ,OAAQyB,SAAUjC,KAAKkB,QAASI,KAAK,SAASO,MAAO,CAACK,MAAM,OAAOC,aAAa,SAASV,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WACnIF,EAAAC,EAAAC,cAAA,UAAQI,QAAS/B,KAAKU,OAAtB,KAGAe,EAAAC,EAAAC,cAAA,UAAQI,QAAS/B,KAAKiB,SAAtB,UAEFQ,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,8CA3DUS,IAAMC,WCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,CAAKpC,UAAW,IAAMqC,SAASC,eAAe,SD2HxD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b8ed127b.chunk.js","sourcesContent":["import React from 'react';\n// import './App.css';\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n\n    this.state = {\n      number:0+this.props.increment,\n    }\n  }\n\n  onAdd =() =>{\n    this.setState((preState, preProps) =>{\n      return{number:preState.number+ preProps.increment}\n    })\n  }\n  onSub =() =>{\n    this.setState((preState, preProps) =>{\n      return{number : preState.number-preProps.increment}\n    })\n  }\n  onSubmit =() =>{\n    let {number} = this.state;\n    if(number>=0 & number<=100){\n    localStorage.setItem(number.toString(),number);\n    \n    }\n    else{\n      alert('Do not try negative integers and above 100 value')\n    }\n  }\n  onReset =() =>{\n    this.setState({number:0})\n  }\n\n  onEvent =(e) =>{\n    let {name, value} = e.target;\n    this.setState({\n      [name] : value,\n    })\n  }\n  render(){\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\" style={{marginLeft:'300px'}}>\n        <h1>{this.state.number}%</h1>\n        \n        <button onClick={this.onAdd}>\n          +\n        </button>\n        <button onClick={this.onSubmit}>Post</button>\n        <p>\n          \n        </p>\n        <input type='text' value={this.state.number} onChange={this.onEvent} name='number' style={{width:'60px',borderRadius:'5px'}}/><br/><br/>\n        <button onClick={this.onSub}>\n          -\n        </button>\n        <button onClick={this.onReset}>Reset</button>\n      </header>\n      <footer>\n        <p>@Copyright DVS 2018-2019</p>\n      </footer>\n    </div>\n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App increment={1}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}